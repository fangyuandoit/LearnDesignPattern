单一职责原则：就一个类而言，应该仅有一个引起它变化的原因
如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的的能力。
这种耦合会导致脆弱的设计，当变化发生时，设计会遭到意想不到的破话。


开放封闭原则：开闭原则，就软件实体（类，模块，函数）是可以扩展的，但是不可修改
两个特征，对于扩展是开放的，对于更改是封闭的.
面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码，这是开闭的精神所在


依赖倒转原则：抽象不应该依赖细节，细节应该依赖抽象。说白了，就是针对接口编程，不要实现编程。
依赖倒转原则：1 高层模块不应该依赖底层模块，两个都应该依赖抽象。 2 抽象不应该依赖细节，细节应该依赖抽象
举例：电脑的cpu，硬盘，内存没有依赖关系，只需要做好自己的抽象实现，就可以随意组装，为不会换cpu，就要一起换。
汽车和轮胎的关系，一种汽车可以用各种品牌的轮胎。只需要轮胎做好实现抽象



里氏代换原则：子类型必须能够替换掉它们的父类型，白话翻译就是一个实体如果使用的是一个父类的话，那么一定适用于其子类，
而且他察觉不出父类对象和子类对象的区别。也就是说，在软件里，把父类都替换成它的子类，程序的行为是没有变化。


迪米特法则(最少知道原则)：如果两个类不必直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类
需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用
迪米特法则的根本思想，是强调类之间的松耦合。类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系
的类造成波及。



